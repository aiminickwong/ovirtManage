# -*- coding:utf-8 -*-
__author__ = 'xuan'

from flask import render_template,request,current_app,session,redirect,url_for,send_from_directory,flash
from . import  main
from  manage import  db
from  manage import app
import commands
import sys,json
import simplejson
from flask.ext.login import login_required, current_user, login_user, logout_user
from more_itertools import chunked
import os
import difflib
from config import config
from lib.upload_file import uploadfile
from werkzeug.utils import secure_filename
from datetime import datetime
import time
import re
import MySQLdb
from  multiprocessing import Pool


reload(sys)
sys.setdefaultencoding('utf8')


@main.route('/users',methods=['GET','POST'])
@login_required
def users():
    if request.method == 'POST':
        #新建用户
        data = request.form.get('data', '')
        #any判断一个对象是否为空的方法
        if  any(data):
            print '新建用户:',data
            try:
                form_data=json.loads(data)["data"]
                name =  form_data['name']
                firstname = form_data['firstname']
                lastname = form_data['lastname']
                if name !='':
                    message = commands.getstatusoutput('ovirt-aaa-jdbc-tool user add %s'%(name))

                    print message

                return simplejson.dumps({"message": message})
            except:
                print 'None'
        else:
            print 'None'


        #删除用户
        del_user = request.form.get('del_user', '')
        if any(del_user):
            print 'del_user',del_user
            del_user_message = commands.getstatusoutput('ovirt-aaa-jdbc-tool user delete %s'%(del_user))
            print del_user_message

            return simplejson.dumps({"message": del_user_message})
        else:
            print 'None'

        #删除多个用户
	    del_users = request.form.get('delete_users','')
        if any(del_users):
            try:
                del_users_list=json.loads(del_users)["data"]
                print del_users_list

                for users in del_users_list:
                    del_users_message = commands.getstatusoutput('ovirt-aaa-jdbc-tool user delete %s'%(users))
                    print del_users_message
            except:
                print 'except'
		

        #解锁用户
        unlock_user = request.form.get('unlock_user', '')
        if any(unlock_user):
            print 'unlock_user',unlock_user
            unlock_user_message = commands.getstatusoutput('ovirt-aaa-jdbc-tool user unlock %s'%(unlock_user))
            print unlock_user_message

            return simplejson.dumps({"message": unlock_user_message})
        else:
            print 'None'

        #设置密码
        set_pwd_name = request.form.get('set_pwd_name', '')
        set_pwd = request.form.get('set_pwd', '')
        if any(set_pwd) and any(set_pwd_name):
            print 'set_pwd'
            set_pwd_message = commands.getstatusoutput('ovirt-aaa-jdbc-tool user password-reset %s --password=pass:%s --password-valid-to="2030-12-31 10:30:00Z" '%(set_pwd_name,set_pwd))
            #print set_pwd_message

            return simplejson.dumps({"message": set_pwd_message})
        else:
            print 'None'
            return simplejson.dumps({"message": 'None'})

        #修改密码
        # change_pwd_name = request.form.get('change_pwd_name', '')
        # change_pwd = request.form.get('change_pwd', '')
        # if any(change_pwd_name) and any(change_pwd):
        #     print 'change_pwd'
        #     change_pwd_message = commands.getstatusoutput('ovirt-aaa-jdbc-tool user password-reset %s  --password=pass:%s'%(change_pwd_name,change_pwd))
        #     print change_pwd_message
        #
        #     return simplejson.dumps({"message": change_pwd_message})
        # else:

    else:
        return render_template('index/users.html')

@main.route('/users_return_json',methods=['GET','POST'])
@login_required
def users_return_json():

    file_name = '%s/app/static/users.txt'%os.getcwd()

    all_users = commands.getstatusoutput('ovirt-aaa-jdbc-tool query --what=user |grep -wE "ID|Name|Email|Department|Title|Description|Disabled|Unlocked At"')
    #print 'all',type(all_users),all_users[1]

    with open(file_name, 'wb') as f:
         f.write(all_users[1])

    result = []
    with open(file_name) as f:
        for i in f.readlines():
            tmp = i.strip().split(':', 1)  # 只切割一次
	        #print "把每一行分割:",tmp
    	    result.append(tmp)

            rs =  [x for x in chunked(result,11)]

        jsonData = []
        for i in range(len(rs)):
            di = {}
            for k,v in enumerate(rs[i]):
                #print v[0],v[1]
                #print 'k,v',k,v
                if v !=['']:
                    di[v[0]] = v[1]
                    if k ==10:
                        jsonData.append(di)

        # print '最终返回',jsonData
    return  json.dumps(jsonData)


@main.route('/user_group',methods=['GET','POST'])
@login_required
def user_group():
    if request.method == 'POST':

        #用户加入到用户组
        add_to_group_data = request.form.get('add_to_group_data', '')

        if any(add_to_group_data):
            print 'add_to_group_data',add_to_group_data

            select_users = json.loads(add_to_group_data)["select_users"]
            select_users = select_users
            #print 'strip',select_users

            try:
                form_data=json.loads(add_to_group_data)["data"]
                group =  form_data['group']
                #user =  form_data['user']
                print 'add_to_group',group

                if group  !=' ':
                    for i in select_users:
                        add_to_group_terminal_message = commands.getstatusoutput('ovirt-aaa-jdbc-tool group-manage useradd %s --user=%s'%(group,i))
                        print 'add_to_group_terminal_message',i,add_to_group_terminal_message

                    user_member = commands.getstatusoutput('ovirt-aaa-jdbc-tool group-manage show %s | grep -wE "User"'%(group.strip()))

                    file_name = '%s/app/static/group_member.txt'%os.getcwd()

                    #写文件
                    with open(file_name, 'wb') as f:
                        f.write(user_member[1])

                    return simplejson.dumps({"message": add_to_group_terminal_message })
            except:
                print 'exceptNone'
        else:
            print 'None'



        data = request.form.get('data', '')
        #any判断一个对象是否为空的方法
        if  any(data):
            print '新建用户组:',data
            try:
                form_data=json.loads(data)["data"]
                group =  form_data['group']
                description =  form_data['description']

                if group and description  !='':
                    add_usergroup_message = commands.getstatusoutput('ovirt-aaa-jdbc-tool group add %s  --attribute="description=%s" '%(group,description))
                return simplejson.dumps({"message": add_usergroup_message})
            except:
                print 'None'
        else:
            print 'None'

        #删除用户组
        del_user_group = request.form.get('del_user_group', '')
        if any(del_user_group):
            print 'del_user_group',del_user_group
            del_user_group_message = commands.getstatusoutput('ovirt-aaa-jdbc-tool group delete %s'%(del_user_group))
            print del_user_group_message

            return simplejson.dumps({"message": del_user_group_message})
        else:
            print 'None'

        #return simplejson.dumps({"message": 'None'})

    else:
        return render_template('index/user_group.html')


@main.route('/user_group_return_json',methods=['GET','POST'])
@login_required
def user_group_return_json():

    file_name = '%s/app/static/user_group.txt'%os.getcwd()

    all_user_group = commands.getstatusoutput('ovirt-aaa-jdbc-tool query --what=group |grep -wE "ID|Name|Description"')

    with open(file_name, 'wb') as f:
        f.write(all_user_group[1])

    result = []
    with open(file_name) as f:
        for i in f:
            tmp = i.strip().split(':', 1)  # 只切割一次
            #print "把每一行分割:",tmp
    	    result.append(tmp)
            #每4个为一个组
            rs =  [x for x in chunked(result,4)]

        jsonData = []
        for i in range(len(rs)):
            di = {}
            for k,v in enumerate(rs[i]):
                #print v[0],v[1]
                #print 'k,v',k,v
                if v !=['']:
                    di[v[0]] = v[1]
                    if k == 3:
                        jsonData.append(di)

    #print '最终返回',jsonData
    return  json.dumps(jsonData)

@main.route('/user_group_member',methods=['GET','POST'])
@login_required
def user_group_member():
    group_mem = request.args.get("group")
    print  group_mem

    if request.method == 'POST':
        file_name = '%s/app/static/group_member.txt'%os.getcwd()
        remove_user = request.form.get('remove_user', '')
        group = request.form.get('group')
        if any(remove_user) and any(group):
            print '移除用户',remove_user,group
            remove_user_message = commands.getstatusoutput('ovirt-aaa-jdbc-tool group-manage userdel %s --user=%s'%(group,remove_user.strip()))
            #print 'ovirt-aaa-jdbc-tool group-manage userdel %s --user=%s'%(group,remove_user)
            print remove_user_message

            user_member = commands.getstatusoutput('ovirt-aaa-jdbc-tool group-manage show %s | grep -wE "User"'%(group.strip()))
            #print 'ovirt-aaa-jdbc-tool group-manage show %s | grep -wE "User"'%(group.strip())
            print '移除成员后生成新表:',user_member

            write_member = user_member[1]

            if user_member[1] == '':
                write_member='''
                                User: -
                             '''
            #写文件
            with open(file_name, 'wb') as f:
                f.write(write_member)

    return render_template('index/user_group_member.html',group_mem=group_mem)



@main.route('/user_group_member_return_json',methods=['GET','POST'])
@login_required
def user_group_member_return_json():
    file_name = '%s/app/static/group_member.txt'%os.getcwd()
    if request.method == 'POST':

        print 'POST'
        find_group = request.form.get('find_group', '')
        print 'find_group',find_group

        if find_group !='':
            print '要查看的group为:',find_group
            user_member = commands.getstatusoutput('ovirt-aaa-jdbc-tool group-manage show %s | grep -wE "User"'%(find_group.strip()))
            print '组成员:',user_member
            write_member = user_member[1]

            if user_member[1] == '':
                write_member='''
                                User: -
                             '''
            #写文件
            with open(file_name, 'wb') as f:
                f.write(write_member)

    result = []
    with open(file_name) as f:
        for i in f:
            tmp = i.strip().split(':', 1)  # 只切割一次
            #print "把每一行分割:",tmp
    	    result.append(tmp)
            #每1个为一个组
            rs =  [x for x in chunked(result,1)]
            #print rs
        jsonData = []
        for i in range(len(rs)):
            di = {}
            for k,v in enumerate(rs[i]):
                #print v[0],v[1]
                #print 'k,v',k,v
                if v !=['']:
                    di[v[0]] = v[1]
                    if k == 0:
                        jsonData.append(di)

    #print '最终返回',jsonData
    return  json.dumps(jsonData)


#添加到用户组时需要加载的用户列表
@main.route('/user_load_return_json',methods=['GET','POST'])
@login_required
def load_users():
    file_users = '%s/app/static/users.txt'%os.getcwd()
    filter_list = '%s/app/static/filter_list.txt'%os.getcwd()
    file_load_users = '%s/app/static/load_users.txt'%os.getcwd()

    if not os.path.exists(filter_list):
        print '不存在，新建文件'
        f = open(filter_list,'w')
        f.close()

    if request.method == 'POST':
        #load
        print 'Post'
        query_group = request.form.get('query_group', '')

        if any(query_group):
            print '点击加入用户,返回该组已存在的成员:'
            group = json.loads(query_group)["data"]
            group_member = commands.getstatusoutput('ovirt-aaa-jdbc-tool group-manage show %s | grep -wE "User"'%(group.strip()))

            print 'group',group_member
            filters = group_member[1].replace(' ', '').splitlines(1)
            print '过滤器',filters
            get_filters = []
            for i in filters:
                line = i.strip('\n')
                get_filters.append(line)
            print get_filters

            all_users = commands.getstatusoutput('ovirt-aaa-jdbc-tool query --what=user |grep -wE "^Name"')

        get_users = []

        all_users = all_users[1].replace(' ','').splitlines(1)
        for line in all_users:
            get_users.append(line.replace('Name','User').strip('\n'))
        print '所有用户',get_users

        ret = list(set(get_users) ^ set(get_filters))
        print 'ret',ret

        result = []
        for i in ret:
            tmp = i.split(":",1)
            result.append(tmp)

        rs = [x for x in chunked(result,1)]
        jsonData = []

        try:
            for i in range(len(rs)):
                    di = {}
                    for k,v in enumerate(rs[i]):
                        #print 'v[0],v[1]',v[0],v[1]
                        #print 'k,v',k,v
                        if k == 0 and v !=[''] :
                            json.dumps(jsonData)           
                            di['id'] = i
                            di['text'] = v[1]

                            jsonData.append(di)
        except:
            return  simplejson.dumps({"errmessage": '无可加入用户！'})

        return  json.dumps(jsonData)


ALLOWED_EXTENSIONS = set(['iso','txt'])
IGNORED_FILES = set(['.gitignore'])


# 上传文件允许的类型
def allowed_file(filename):
    return '.' in filename and \
           filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS


# 生成文件名
def gen_file_name(filename):
    """
    If file was exist already, rename it and return a new name
    """

    print '生成文件名', os.path.join(os.getcwd(),app.config['UPLOAD_FOLDER'], filename)
    i = 1
    while os.path.exists(os.path.join(os.getcwd(),app.config['UPLOAD_FOLDER'], filename)):
        name, extension = os.path.splitext(filename)
        filename = '%s_%s%s' % (name, str(i), extension)
        i = i + 1

    return filename


@main.route("/upload",methods=['GET','POST'])
@login_required
def iso_upload():
    if not os.path.exists('/home/iso_file'):
        os.mkdir('/home/iso_file')

    if request.method == 'POST':
        print 'upload iso'
        file = request.files['file']
        if file:
            filename = secure_filename(file.filename)
            filename = gen_file_name(filename)
            mimetype = file.content_type

            if not allowed_file(file.filename):
                print 'result,filename',filename
                result = uploadfile(name=filename, type=mimetype, size=0, not_allowed_msg="不支持的文件类型")
                print 'result',result

            else:
                # save file to disk  os.getcwd()获取当前脚本路径
                print "保存文件", os.path.join(app.config['UPLOAD_FOLDER'], filename)
                uploaded_file_path = os.path.join(app.config['UPLOAD_FOLDER'], filename)
                print "uploaded_file_path", uploaded_file_path
                file.save(uploaded_file_path)

                # get file size after saving
                size = os.path.getsize(uploaded_file_path)

                # 在saving后保存上传日期和路径
                # 获取系统时间
                #get_time = time.strftime('%Y-%m-%d', time.localtime(time.time()))
                #print '----',datetime.utcnow()
                #upload_date = get_time

                if '.' in filename:
                    number = filename.rsplit('.', 1)[0]

                # add_contract = Contract(name=filename, path=uploaded_file_path, upload_date=get_time, number=number)
                # db.session.add(add_contract)
                # db.session.commit()

                # return json for js call back
                result = uploadfile(name=filename, type=mimetype, size=size)

            return simplejson.dumps({"files": [result.get_file()]})

    if request.method == 'GET':
        print "GET"

        print 'path',os.getcwd()

        # get all file in ./data directory
        files = [f for f in os.listdir(os.path.join(app.config['UPLOAD_FOLDER'])) if
                 os.path.isfile(os.path.join(app.config['UPLOAD_FOLDER'], f)) and f not in IGNORED_FILES]

        file_display = []
        #get_time = datetime.utcnow()

        for f in files:
            # 获取每个iso文件的上传日期
            # if Contract.query.filter_by(name=f).first() is not None:
            #     upload_date_display = Contract.query.filter_by(name=f).first().upload_date
            # else:
            #     upload_date_display = '-'

            size = os.path.getsize(os.path.join(app.config['UPLOAD_FOLDER'], f))
            file_saved = uploadfile(name=f, size=size) #upload_date=upload_date_display
            file_display.append(file_saved.get_file())
        return simplejson.dumps({"files": file_display})

    return redirect(url_for('main.iso_file'))

@main.route("/delete/<string:filename>", methods=['DELETE'])
@login_required
def delete(filename):
    file_path = os.path.join(app.config['UPLOAD_FOLDER'], filename)
    file_thumb_path = os.path.join(os.getcwd(),app.config['THUMBNAIL_FOLDER'], filename)
    print "del_name", filename

    if os.path.exists(file_path):
        try:
            os.remove(file_path)

            if os.path.exists(file_thumb_path):
                os.remove(file_thumb_path)

            return simplejson.dumps({filename: 'True'})
        except:
            return simplejson.dumps({filename: 'False'})


# serve static files
@main.route("/thumbnail/<string:filename>", methods=['GET'])
@login_required
def get_thumbnail(filename):
    print "获取静态文件", app.config['THUMBNAIL_FOLDER']
    print "获取静态文件", filename

    return send_from_directory(os.path.join(os.getcwd(),app.config['THUMBNAIL_FOLDER']), filename=filename)


@main.route("/data/<string:filename>", methods=['GET'])
@login_required
def get_file(filename):
    print "获取上传文件：", filename
    return send_from_directory(os.path.join(os.getcwd(),app.config['UPLOAD_FOLDER']), filename=filename)


@main.route('/iso_file', methods=['GET', 'POST'])
@login_required
def iso_file():
    return render_template('index/iso_file.html')



@main.route('/change_ip', methods=['GET', 'POST'])
@login_required
def change_ip():

    ifcfg = '/etc/sysconfig/network-scripts/ifcfg-ovirtmgmt'
    route = '/etc/sysconfig/network-scripts/route-ovirtmgmt'
    host = '/etc/hosts'

    ip_mask_gate = []
    with open(ifcfg) as f:
        for line in f.readlines():
	    if(line.find('IPADDR')==0):
	        ipaddr = line.strip().split('=',1)	
		ip_mask_gate.append(ipaddr[1])
            if(line.find('NETMASK')==0):
		netmask = line.strip().split('=',1)
		ip_mask_gate.append(netmask[1])
	    if(line.find('GATEWAY')==0):
		gateway = line.strip().split('=',1)
		ip_mask_gate.append(gateway[1])

	print ip_mask_gate

    #显示hostname
    hostname = commands.getstatusoutput('hostname')[1]
    


    if request.method == 'POST':

	#flash(u'正在重启服务')

	re_data = request.form.get('data', '')
	if any(re_data):
	    try:
	        form_data = json.loads(re_data)["data"]
                ipaddr = form_data['ipaddr']
        	netmask = form_data['netmask']
        	gateway = form_data['gateway']

    	    	data = ''

	    	if ipaddr != "" and netmask !="" and gateway != "":
		    print '修改ifcfg-ovirtmgmt'
    	    	    with open(ifcfg) as f:
                        for line in f.readlines():
    	                    if(line.find('IPADDR')==0):	
	    	                line = 'IPADDR=%s'%(ipaddr) + '\n'
			    if(line.find('NETMASK')==0):
				line = 'NETMASK=%s'%(netmask) + '\n'
			    if(line.find('GATEWAY')==0):
				line = 'GATEWAY=%s'%(gateway) + '\n'
		
	                    data += line
    
                    with open(ifcfg,'w') as f:
	               f.writelines(data)
		
		    
		    print '修改route-ovirtmgmt'

		    route_data = ''
		    with open(route) as f:
			for line in f.readlines()[:2]:
			    route_data += line


                    with open(route) as f:
			for line in f.readlines()[2:]:
		            #get_line = line.split(' ')
			    pattern = 'via (.*?) dev'
			    out = re.sub(pattern,'via %s dev'%ipaddr,line)
			    route_data += out

		    #print '----',route_data

                    with open(route,'w') as f:
                        f.writelines(route_data)


		    print '修改host'
		    host_data = ''
		    with open(host) as f:
                       lines = f.readlines()

                    pattern = r'(?<![\.\d])(?:\d{1,3}\.){3}\d{1,3}(?![\.\d])'
                    out = re.sub(pattern,'%s'%ipaddr,lines[2])
                    #print 'out',out
		    lines[-1] = out 
		    #print 'lines',lines 

                    with open(host,'w') as f:
                        f.writelines(lines)
	
		    network = commands.getstatusoutput('service network restart')
		    #ovirtengine = commands.getstatusoutput('service ovirt-engine restart')
		    print network
		    print ovirtengine

	    except Exception as e:
		print e


    return render_template('index/change_ip.html',ipaddr=ip_mask_gate[0],netmask=ip_mask_gate[1],gateway=ip_mask_gate[2],hostname=hostname)


import subprocess





#@main.route('/search')

from multiprocessing import Pool
import commands


@main.route('/remote', methods=['GET', 'POST'])
@login_required
def remote():
    print('VNC')
    db = MySQLdb.connect('localhost','root','uroot012','ovirt_development',charset='utf8')
    cursor = db.cursor()
    sql = """CREATE TABLE IF NOT EXISTS `assets` (
  	    	`CLIENT_MAC` VARCHAR(255),
 	    	`CLIENT_VNCPWD` VARCHAR(255),
  	    	`CLIENT_CFGPWD` VARCHAR(255),
  	    	`CLIENT_DFAPP` VARCHAR(255),
  	    	`CLIENT_DFSRV` VARCHAR(255),
 	    	`CLIENT_MEM` VARCHAR(255),
  	    	`CLIENT_GPU` VARCHAR(255),
  	    	`CLIENT_CPU` VARCHAR(255),
  	    	`CLIENT_NIC` VARCHAR(255),
  	    	`CLIENT_OS` VARCHAR(255),
  	    	`CLIENT_Model` VARCHAR(255),
  	    	`CLIENT_STORAGE` VARCHAR(255),
  	    	`CLIENT_KERNEL` VARCHAR(255),
  	    	`CLIENT_IP` VARCHAR(255),
  	    	`CLIENT_AUDIO` VARCHAR(255),
 	    	`CLIENT_VERSION` VARCHAR(255),
  	    	`CLIENT_NAME` VARCHAR(255),
  	    	`CLIENT_FREQ`  VARCHAR(255),
  	    	`CLIENT_DISPLAY` VARCHAR(255),
  	    	`CLIENT_OPT` VARCHAR(255),
  	        `CLIENT_SESSION_0_TYPE` VARCHAR(255),
 	   	`CLIENT_LANGUAGE` VARCHAR(255),
  	   	 PRIMARY KEY(`CLIENT_MAC`)
	     )ENGINE=InnoDB DEFAULT CHARSET=utf8;"""
    #try:
	#cursor.execute(sql)
 	#db.commit()
    #except:
	#db.rollback()
    #db.close()
    
    if request.method == 'POST':
       re_data = request.form.get('data', '')
       if any(re_data):
           try:
               form_data = json.loads(re_data)["data"]
               ipaddr_1 = form_data['ipaddr_1']
	       ipaddr_2 = form_data['ipaddr_2']
	       ipaddr_3 = form_data['ipaddr_3']

               if ipaddr_1 and ipaddr_2 and ipaddr_3 != "":
	       	   print('run search...')

		   def search_task():
		       for i in range(1,255):
    		           print('Search... ip:%s'%i)
			   #这里不用commands命令,会出现问题
   		           search = os.popen('tcmclient  %s.%s.%s.%s --scani&'%(ipaddr_1,ipaddr_2,ipaddr_3,i))
    		           print(search)
		   search_task()

   	           print('search done')

	   except Exception as e:
                print e



    return render_template('index/remote.html',vnc='vnc')

